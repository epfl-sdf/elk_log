input {
  file {
    path => "/home/ubuntu/data-elk/wwp_all_clean.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  grok  {
    patterns_dir => ["./wwp_pattern_grok.conf"]
    match => {"message" => "%{DATETIME:zdate} - root - ERROR - %{GREEDYDATA:reste}"}
  } 
  
  date {
    match => ["zdate","yyyy-MM-dd HH:mm:ss,SSS"]
  }

  ruby {
    code => "
      premiere_separation = event['reste'].split(/ - /);
      length = premiere_separation.length;
      
      if length == 1
        event['site'] = 'no_parent';
        event['nom_erreur_analyzed'] = premiere_separation[0];
        event['code_erreur_analyzed'] = 'no_code';
      else
        separation_erreur = premiere_separation[2].split(/: /);
        length_erreur = separation_erreur.length;

        if length_erreur == 1
          event['code_erreur_analyzed'] = premiere_separation[2];
        else
          event['code_erreur_analyzed'] = separation_erreur[1];
        end

        event['nom_erreur_analyzed'] = premiere_separation[1];
        event['site'] = premiere_separation[0];
      end
    "

    add_field => {"code_erreur_unanalyzed" => "%{code_erreur_analyzed}"}
    add_field => {"nom_erreur_unanalyzed" => "%{nom_erreur_analyzed}"}    
  }

  if "Command 'docker exec" in [code_erreur_unanalyzed] {
    mutate {
      replace => { "code_erreur_unanalyzed" => "Command 'docker exec"}
    }
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTOC_SRV}"]
    index => ["${ELASTOC_IDX}"]
    document_type => "logstash_grok"
  }

  stdout {
    codec => json
  }
}
